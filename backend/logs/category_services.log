2024-08-02 16:44:28,650 - backend.services.category_services - ERROR - Category Read Service Exception: 500: 'Query' object has no attribute 'sort'
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\authentication_services.py", line 101, in decorator
    data = jwt.decode(accesstoken, AuthenticationEnum.SECRET_KEY, algorithms=["HS256"])
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 162, in decode_complete
    self._validate_claims(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 248, in _validate_claims
    self._validate_exp(payload, now, leeway)
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 306, in _validate_exp
    raise ExpiredSignatureError("Signature has expired")
jwt.exceptions.ExpiredSignatureError: Signature has expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 37, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0).sort(sort_criteria).skip(skip).limit(
AttributeError: 'Query' object has no attribute 'sort'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 45, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: 'Query' object has no attribute 'sort'
2024-08-02 16:44:43,872 - backend.services.category_services - ERROR - Category Read Service Exception: 500: 'Session' object has no attribute 'find'
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\authentication_services.py", line 101, in decorator
    data = jwt.decode(accesstoken, AuthenticationEnum.SECRET_KEY, algorithms=["HS256"])
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 162, in decode_complete
    self._validate_claims(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 248, in _validate_claims
    self._validate_exp(payload, now, leeway)
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 306, in _validate_exp
    raise ExpiredSignatureError("Signature has expired")
jwt.exceptions.ExpiredSignatureError: Signature has expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 37, in view_data_all
    view_stmt = db.find(table).filter(table.c.is_deleted == 0).sort(
AttributeError: 'Session' object has no attribute 'find'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 46, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: 'Session' object has no attribute 'find'
2024-08-02 16:45:29,483 - backend.services.category_services - ERROR - Category Read Service Exception: 500: filter() got an unexpected keyword argument 'skip'
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\authentication_services.py", line 101, in decorator
    data = jwt.decode(accesstoken, AuthenticationEnum.SECRET_KEY, algorithms=["HS256"])
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 162, in decode_complete
    self._validate_claims(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 248, in _validate_claims
    self._validate_exp(payload, now, leeway)
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 306, in _validate_exp
    raise ExpiredSignatureError("Signature has expired")
jwt.exceptions.ExpiredSignatureError: Signature has expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 37, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0, skip=skip, limit=limit, sort_criteria=sort_criteria).all()
TypeError: filter() got an unexpected keyword argument 'skip'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 44, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: filter() got an unexpected keyword argument 'skip'
2024-08-02 16:46:33,784 - backend.services.category_services - ERROR - Category Read Service Exception: 500: filter() got an unexpected keyword argument 'offset'
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\authentication_services.py", line 101, in decorator
    data = jwt.decode(accesstoken, AuthenticationEnum.SECRET_KEY, algorithms=["HS256"])
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 162, in decode_complete
    self._validate_claims(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 248, in _validate_claims
    self._validate_exp(payload, now, leeway)
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 306, in _validate_exp
    raise ExpiredSignatureError("Signature has expired")
jwt.exceptions.ExpiredSignatureError: Signature has expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 37, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0,
TypeError: filter() got an unexpected keyword argument 'offset'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 46, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: filter() got an unexpected keyword argument 'offset'
2024-08-02 17:05:45,651 - backend.services.category_services - ERROR - Category Read Service Exception: 500: Query.filter() being called on a Query which already has LIMIT or OFFSET applied.  Call filter() before limit() or offset() are applied.
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\authentication_services.py", line 101, in decorator
    data = jwt.decode(accesstoken, AuthenticationEnum.SECRET_KEY, algorithms=["HS256"])
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 162, in decode_complete
    self._validate_claims(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 248, in _validate_claims
    self._validate_exp(payload, now, leeway)
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 306, in _validate_exp
    raise ExpiredSignatureError("Signature has expired")
jwt.exceptions.ExpiredSignatureError: Signature has expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 38, in view_data_all
    view_stmt = db.query(table).offset(skip).limit(limit).filter(table.c.is_deleted == 0).all()
  File "<string>", line 2, in filter
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "<string>", line 2, in filter
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\base.py", line 303, in generate
    assertion(self, fn.__name__)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 442, in _no_limit_offset
    raise sa_exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Query.filter() being called on a Query which already has LIMIT or OFFSET applied.  Call filter() before limit() or offset() are applied.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 45, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: Query.filter() being called on a Query which already has LIMIT or OFFSET applied.  Call filter() before limit() or offset() are applied.
2024-08-02 17:08:08,149 - backend.services.category_services - ERROR - Category Read Service Exception: 500: Query.order_by() being called on a Query which already has LIMIT or OFFSET applied.  Call order_by() before limit() or offset() are applied.
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 38, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted ==
  File "<string>", line 2, in order_by
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2027, in order_by
    assertion("order_by")
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 442, in _no_limit_offset
    raise sa_exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Query.order_by() being called on a Query which already has LIMIT or OFFSET applied.  Call order_by() before limit() or offset() are applied.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 47, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: Query.order_by() being called on a Query which already has LIMIT or OFFSET applied.  Call order_by() before limit() or offset() are applied.
2024-08-02 17:08:53,716 - backend.services.category_services - ERROR - Category Read Service Exception: 500: ORDER BY expression expected, got [('category_name', 1)].
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 38, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0).order_by(sort_criteria).offset(skip).limit(limit).all()
  File "<string>", line 2, in order_by
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2032, in order_by
    criterion = tuple(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2033, in <genexpr>
    coercions.expect(roles.OrderByRole, clause)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 396, in expect
    resolved = impl._literal_coercion(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 634, in _literal_coercion
    self._raise_for_expected(element, argname)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 518, in _raise_for_expected
    raise exc.ArgumentError(msg, code=code) from err
sqlalchemy.exc.ArgumentError: ORDER BY expression expected, got [('category_name', 1)].

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 45, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: ORDER BY expression expected, got [('category_name', 1)].
2024-08-02 17:09:08,499 - backend.services.category_services - ERROR - Category Read Service Exception: 500: ORDER BY expression expected, got [('category_name', 1)].
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 38, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted ==
  File "<string>", line 2, in order_by
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2032, in order_by
    criterion = tuple(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2033, in <genexpr>
    coercions.expect(roles.OrderByRole, clause)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 396, in expect
    resolved = impl._literal_coercion(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 634, in _literal_coercion
    self._raise_for_expected(element, argname)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 518, in _raise_for_expected
    raise exc.ArgumentError(msg, code=code) from err
sqlalchemy.exc.ArgumentError: ORDER BY expression expected, got [('category_name', 1)].

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 46, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: ORDER BY expression expected, got [('category_name', 1)].
2024-08-02 17:10:40,699 - backend.services.category_services - ERROR - Category Read Service Exception: 500: ORDER BY expression expected, got 1.
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 38, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted ==
  File "<string>", line 2, in order_by
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2032, in order_by
    criterion = tuple(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2033, in <genexpr>
    coercions.expect(roles.OrderByRole, clause)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 396, in expect
    resolved = impl._literal_coercion(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 634, in _literal_coercion
    self._raise_for_expected(element, argname)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 518, in _raise_for_expected
    raise exc.ArgumentError(msg, code=code) from err
sqlalchemy.exc.ArgumentError: ORDER BY expression expected, got 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip, limit, sort_criteria)
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 49, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: ORDER BY expression expected, got 1.
2024-08-02 19:35:33,316 - backend.services.category_services - ERROR - Category Read Service Exception: 500: 'Query' object has no attribute 'search'
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 39, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0).order_by(sorting_column).offset(
AttributeError: 'Query' object has no attribute 'search'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 47, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: 'Query' object has no attribute 'search'
2024-08-02 19:36:25,946 - backend.services.category_services - ERROR - Category Read Service Exception: 500: Query.having() being called on a Query which already has LIMIT or OFFSET applied.  Call having() before limit() or offset() are applied.
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\authentication_services.py", line 104, in decorator
    data = jwt.decode(accesstoken, AuthenticationEnum.SECRET_KEY, algorithms=["HS256"])
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 162, in decode_complete
    self._validate_claims(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 248, in _validate_claims
    self._validate_exp(payload, now, leeway)
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 306, in _validate_exp
    raise ExpiredSignatureError("Signature has expired")
jwt.exceptions.ExpiredSignatureError: Signature has expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 39, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0).order_by(sorting_column).offset(
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\base.py", line 303, in generate
    assertion(self, fn.__name__)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 442, in _no_limit_offset
    raise sa_exc.InvalidRequestError(
sqlalchemy.exc.InvalidRequestError: Query.having() being called on a Query which already has LIMIT or OFFSET applied.  Call having() before limit() or offset() are applied.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 47, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: Query.having() being called on a Query which already has LIMIT or OFFSET applied.  Call having() before limit() or offset() are applied.
2024-08-02 19:36:46,750 - backend.services.category_services - ERROR - Category Read Service Exception: 500: Textual SQL expression 'spring' should be explicitly declared as text('spring')
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 39, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0).order_by(sorting_column).having(search).offset(
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\base.py", line 304, in generate
    fn(self, *args, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2107, in having
    having_criteria = coercions.expect(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 396, in expect
    resolved = impl._literal_coercion(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 621, in _literal_coercion
    return self._text_coercion(element, argname, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 918, in _text_coercion
    return _no_text_coercion(element, argname)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 584, in _no_text_coercion
    raise exc_cls(
sqlalchemy.exc.ArgumentError: Textual SQL expression 'spring' should be explicitly declared as text('spring')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 47, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: Textual SQL expression 'spring' should be explicitly declared as text('spring')
2024-08-02 19:37:00,182 - backend.services.category_services - ERROR - Category Read Service Exception: 500: Textual SQL expression "'spring'" should be explicitly declared as text("'spring'")
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 39, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0).order_by(sorting_column).having(search).offset(
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\base.py", line 304, in generate
    fn(self, *args, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2107, in having
    having_criteria = coercions.expect(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 396, in expect
    resolved = impl._literal_coercion(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 621, in _literal_coercion
    return self._text_coercion(element, argname, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 918, in _text_coercion
    return _no_text_coercion(element, argname)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 584, in _no_text_coercion
    raise exc_cls(
sqlalchemy.exc.ArgumentError: Textual SQL expression "'spring'" should be explicitly declared as text("'spring'")

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 47, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: Textual SQL expression "'spring'" should be explicitly declared as text("'spring'")
2024-08-02 19:37:13,410 - backend.services.category_services - ERROR - Category Read Service Exception: 500: Textual SQL expression '(spring)' should be explicitly declared as text('(spring)')
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 39, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0).order_by(sorting_column).having(search).offset(
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\base.py", line 304, in generate
    fn(self, *args, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2107, in having
    having_criteria = coercions.expect(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 396, in expect
    resolved = impl._literal_coercion(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 621, in _literal_coercion
    return self._text_coercion(element, argname, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 918, in _text_coercion
    return _no_text_coercion(element, argname)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 584, in _no_text_coercion
    raise exc_cls(
sqlalchemy.exc.ArgumentError: Textual SQL expression '(spring)' should be explicitly declared as text('(spring)')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 47, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: Textual SQL expression '(spring)' should be explicitly declared as text('(spring)')
2024-08-02 19:44:42,736 - backend.services.category_services - ERROR - Category Read Service Exception: 500: 'Query' object has no attribute 'filer'
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 40, in view_data_all
    view_stmt = db.query(table).filer(table.c.is_deleted ==
AttributeError: 'Query' object has no attribute 'filer'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 54, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: 'Query' object has no attribute 'filer'
2024-08-02 19:45:00,702 - backend.services.category_services - ERROR - Category Read Service Exception: 500: Textual SQL expression 'spring' should be explicitly declared as text('spring')
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 40, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0).having(search).offset(
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\base.py", line 304, in generate
    fn(self, *args, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2107, in having
    having_criteria = coercions.expect(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 396, in expect
    resolved = impl._literal_coercion(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 621, in _literal_coercion
    return self._text_coercion(element, argname, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 918, in _text_coercion
    return _no_text_coercion(element, argname)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 584, in _no_text_coercion
    raise exc_cls(
sqlalchemy.exc.ArgumentError: Textual SQL expression 'spring' should be explicitly declared as text('spring')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 53, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: Textual SQL expression 'spring' should be explicitly declared as text('spring')
2024-08-02 19:45:17,176 - backend.services.category_services - ERROR - Category Read Service Exception: 500: Textual SQL expression 'spring' should be explicitly declared as text('spring')
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 40, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted == 0).having((search)).offset(
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 279, in _generative
    x = fn(self, *args, **kw)
  File "<string>", line 2, in having
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\base.py", line 304, in generate
    fn(self, *args, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2107, in having
    having_criteria = coercions.expect(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 396, in expect
    resolved = impl._literal_coercion(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 621, in _literal_coercion
    return self._text_coercion(element, argname, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 918, in _text_coercion
    return _no_text_coercion(element, argname)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 584, in _no_text_coercion
    raise exc_cls(
sqlalchemy.exc.ArgumentError: Textual SQL expression 'spring' should be explicitly declared as text('spring')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 53, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: Textual SQL expression 'spring' should be explicitly declared as text('spring')
2024-08-02 19:47:41,286 - backend.services.category_services - ERROR - Category Read Service Exception: 500: filter_by() takes 1 positional argument but 2 were given
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 40, in view_data_all
    view_stmt = db.query(table).filter(table.c.is_deleted ==
TypeError: filter_by() takes 1 positional argument but 2 were given

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 105, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 18, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 54, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: filter_by() takes 1 positional argument but 2 were given
2024-08-05 12:11:19,131 - backend.services.category_services - ERROR - Category Read Service Exception: 500: all
Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 1617, in __getattr__
    return self._index[key][1]
KeyError: 'all'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 32, in view_data_all
    .where(table.c.all == search).offset(skip).limit(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 1619, in __getattr__
    raise AttributeError(key) from err
AttributeError: all

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 109, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 20, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 45, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: all
2024-08-05 12:11:36,702 - backend.services.category_services - ERROR - Category Read Service Exception: 500: 'Table' object has no attribute 'r'
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 32, in view_data_all
    .where(table.r == search).offset(skip).limit(
AttributeError: 'Table' object has no attribute 'r'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 109, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 20, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 45, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: 'Table' object has no attribute 'r'
2024-08-05 12:12:35,179 - backend.services.category_services - ERROR - Category Read Service Exception: 500: 'Table' object has no attribute 'r'
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 32, in view_data_all
    .where(table.r.all == search).offset(skip).limit(
AttributeError: 'Table' object has no attribute 'r'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 109, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 20, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 45, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: 'Table' object has no attribute 'r'
2024-08-05 12:13:33,371 - backend.services.category_services - ERROR - Category Read Service Exception: 500: 'Table' object has no attribute 'r'
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 32, in view_data_all
    .where(table.r.category_name == search).offset(
AttributeError: 'Table' object has no attribute 'r'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 109, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 20, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 46, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: 'Table' object has no attribute 'r'
2024-08-05 16:05:55,860 - backend.services.category_services - ERROR - Category Read Service Exception: 500: like
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\authentication_services.py", line 112, in decorator
    data = jwt.decode(accesstoken, AuthenticationEnum.SECRET_KEY, algorithms=["HS256"])
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 162, in decode_complete
    self._validate_claims(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 248, in _validate_claims
    self._validate_exp(payload, now, leeway)
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 306, in _validate_exp
    raise ExpiredSignatureError("Signature has expired")
jwt.exceptions.ExpiredSignatureError: Signature has expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 1617, in __getattr__
    return self._index[key][1]
KeyError: 'like'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 39, in view_data_all
    b = table.c.like(f"%{search}%")
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 1619, in __getattr__
    raise AttributeError(key) from err
AttributeError: like

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 108, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 20, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 54, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: like
2024-08-05 16:33:42,274 - backend.services.category_services - ERROR - Category Read Service Exception: 500: 'NoneType' object is not subscriptable
Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\authentication_services.py", line 112, in decorator
    data = jwt.decode(accesstoken, AuthenticationEnum.SECRET_KEY, algorithms=["HS256"])
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 210, in decode
    decoded = self.decode_complete(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 162, in decode_complete
    self._validate_claims(
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 248, in _validate_claims
    self._validate_exp(payload, now, leeway)
  File "C:\ProgramData\Anaconda3\lib\site-packages\jwt\api_jwt.py", line 306, in _validate_exp
    raise ExpiredSignatureError("Signature has expired")
jwt.exceptions.ExpiredSignatureError: Signature has expired

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 30, in view_data_all
    sorting_column = sort_criteria[0][0]
TypeError: 'NoneType' object is not subscriptable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 98, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 20, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 50, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: 'NoneType' object is not subscriptable
2024-08-05 16:36:35,084 - backend.services.category_services - ERROR - Category Read Service Exception: 500: Can't resolve label reference for ORDER BY / GROUP BY / DISTINCT etc. Textual SQL expression 'category_ev' should be explicitly declared as text('category_ev')
Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 2499, in visit_textual_label_reference
    col = with_cols[element.element]
KeyError: 'category_ev'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 43, in view_data_all
    return query.all()
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2673, in all
    return self._iter().all()  # type: ignore
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\query.py", line 2827, in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\session.py", line 2351, in execute
    return self._execute_internal(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\session.py", line 2236, in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\orm\context.py", line 293, in orm_execute_statement
    result = conn.execute(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\engine\base.py", line 1418, in execute
    return meth(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\elements.py", line 515, in _execute_on_connection
    return connection._execute_clauseelement(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\engine\base.py", line 1632, in _execute_clauseelement
    compiled_sql, extracted_params, cache_hit = elem._compile_w_cache(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\elements.py", line 703, in _compile_w_cache
    compiled_sql = self._compiler(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\elements.py", line 316, in _compiler
    return dialect.statement_compiler(dialect, self, **kw)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 1429, in __init__
    Compiled.__init__(self, dialect, statement, **kwargs)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 870, in __init__
    self.string = self.process(self.statement, **compile_kwargs)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 915, in process
    return obj._compiler_dispatch(self, **kwargs)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\visitors.py", line 141, in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 4824, in visit_select
    text = self._compose_select_body(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 5007, in _compose_select_body
    text += self.order_by_clause(select, **kwargs)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 5116, in order_by_clause
    order_by = self._generate_delimited_list(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 2752, in _generate_delimited_list
    return separator.join(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 2752, in <genexpr>
    return separator.join(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 2754, in <genexpr>
    for s in (c._compiler_dispatch(self, **kw) for c in elements)
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\visitors.py", line 141, in _compiler_dispatch
    return meth(self, **kw)  # type: ignore  # noqa: E501
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\compiler.py", line 2501, in visit_textual_label_reference
    coercions._no_text_coercion(
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\coercions.py", line 584, in _no_text_coercion
    raise exc_cls(
sqlalchemy.exc.CompileError: Can't resolve label reference for ORDER BY / GROUP BY / DISTINCT etc. Textual SQL expression 'category_ev' should be explicitly declared as text('category_ev')

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 99, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 20, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 50, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: Can't resolve label reference for ORDER BY / GROUP BY / DISTINCT etc. Textual SQL expression 'category_ev' should be explicitly declared as text('category_ev')
2024-08-05 16:38:22,132 - backend.services.category_services - ERROR - Category Read Service Exception: 500: is_created
Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 1617, in __getattr__
    return self._index[key][1]
KeyError: 'is_created'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 33, in view_data_all
    sorting_column = table.c.is_created
  File "C:\ProgramData\Anaconda3\lib\site-packages\sqlalchemy\sql\base.py", line 1619, in __getattr__
    raise AttributeError(key) from err
AttributeError: is_created

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\category_services.py", line 99, in admin_read_categories
    category_data = category_dao.read_categories(skip, limit,
  File "D:\Training\FastAPI\Structural FastAPI\backend\dao\category_dao.py", line 20, in read_categories
    category_data = sql_dynamic.view_data_all('category_table', skip,
  File "D:\Training\FastAPI\Structural FastAPI\backend\sql_dynamic.py", line 53, in view_data_all
    return ApplicationServices.handle_exception(exception, True)
  File "D:\Training\FastAPI\Structural FastAPI\backend\services\app_services.py", line 36, in handle_exception
    raise HTTPException(status_code=response['status_code'], detail=response['response_message'])
fastapi.exceptions.HTTPException: 500: is_created
